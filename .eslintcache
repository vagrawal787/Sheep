[{"/Users/animeshagrawal/Documents/Sheep/src/index.js":"1","/Users/animeshagrawal/Documents/Sheep/src/App.js":"2","/Users/animeshagrawal/Documents/Sheep/src/reportWebVitals.js":"3","/Users/animeshagrawal/Documents/Sheep/src/pages/landingForm.jsx":"4","/Users/animeshagrawal/Documents/Sheep/src/pages/thankYouForm.jsx":"5","/Users/animeshagrawal/Documents/Sheep/src/pages/adminConsole.jsx":"6","/Users/animeshagrawal/Documents/Sheep/src/pages/userForm.jsx":"7","/Users/animeshagrawal/Documents/Sheep/src/pages/404.jsx":"8","/Users/animeshagrawal/Documents/Sheep/src/pages/formEditor.jsx":"9","/Users/animeshagrawal/Documents/Sheep/src/pages/thankPage.jsx":"10","/Users/animeshagrawal/Documents/Sheep/src/pages/formCreator.jsx":"11","/Users/animeshagrawal/Documents/Sheep/src/pages/resultsPage.jsx":"12","/Users/animeshagrawal/Documents/Sheep/src/pages/matchingPage.jsx":"13","/Users/animeshagrawal/Documents/Sheep/src/pages/responseManager.jsx":"14","/Users/animeshagrawal/Documents/Sheep/src/graphql/queries.js":"15","/Users/animeshagrawal/Documents/Sheep/src/graphql/mutations.js":"16","/Users/animeshagrawal/Documents/Sheep/src/components/Input.jsx":"17","/Users/animeshagrawal/Documents/Sheep/src/components/Textarea.jsx":"18","/Users/animeshagrawal/Documents/Sheep/src/components/Button.jsx":"19","/Users/animeshagrawal/Documents/Sheep/src/containers/LandingFormContainer.jsx":"20","/Users/animeshagrawal/Documents/Sheep/src/aws-exports.js":"21"},{"size":500,"mtime":1611114981847,"results":"22","hashOfConfig":"23"},{"size":2284,"mtime":1611114981843,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1611114981853,"results":"25","hashOfConfig":"23"},{"size":386,"mtime":1611114981851,"results":"26","hashOfConfig":"23"},{"size":1243,"mtime":1611114981852,"results":"27","hashOfConfig":"23"},{"size":6543,"mtime":1611114981850,"results":"28","hashOfConfig":"23"},{"size":13989,"mtime":1611114981853,"results":"29","hashOfConfig":"23"},{"size":178,"mtime":1611114981847,"results":"30","hashOfConfig":"23"},{"size":9058,"mtime":1611114981851,"results":"31","hashOfConfig":"23"},{"size":1123,"mtime":1611114981852,"results":"32","hashOfConfig":"23"},{"size":9663,"mtime":1611114981851,"results":"33","hashOfConfig":"23"},{"size":11925,"mtime":1611114981852,"results":"34","hashOfConfig":"23"},{"size":6917,"mtime":1611114981851,"results":"35","hashOfConfig":"23"},{"size":20078,"mtime":1611117738323,"results":"36","hashOfConfig":"23"},{"size":8152,"mtime":1611114981846,"results":"37","hashOfConfig":"23"},{"size":12055,"mtime":1611114981845,"results":"38","hashOfConfig":"23"},{"size":540,"mtime":1611114981844,"results":"39","hashOfConfig":"23"},{"size":608,"mtime":1611114981844,"results":"40","hashOfConfig":"23"},{"size":390,"mtime":1611114981844,"results":"41","hashOfConfig":"23"},{"size":6267,"mtime":1611114981845,"results":"42","hashOfConfig":"23"},{"size":734,"mtime":1611117328757,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"y9c7w",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"46"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/Users/animeshagrawal/Documents/Sheep/src/index.js",[],["97","98"],"/Users/animeshagrawal/Documents/Sheep/src/App.js",[],"/Users/animeshagrawal/Documents/Sheep/src/reportWebVitals.js",[],"/Users/animeshagrawal/Documents/Sheep/src/pages/landingForm.jsx",[],"/Users/animeshagrawal/Documents/Sheep/src/pages/thankYouForm.jsx",["99","100","101","102","103"],"import React, { Component } from 'react';\nimport Button from '../components/Button';\n\nimport {BrowserRouter as Router, Route, Switch, Link, Redirect} from 'react-router-dom';\n\nclass ThankFormCreate extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirect: false,\n        }\n        this.handleButtonPress = this.handleButtonPress.bind(this);\n    }\n\n    handleButtonPress(e) {\n        e.preventDefault();\n        console.log(\"button pressed\");\n        this.setState({ redirect: true });\n    }\n\n    render() {\n        if (this.state.redirect) {\n            this.state.redirect = false;\n            return <Redirect to={{\n                pathname: \"/adminConsole\",\n                state: { refresh: true }\n            }} />\n        }\n        return (\n            <div>\n                <h1>\n                    Thanks for creating a form! Be sure to send this code to your players: {this.props.location.state.code}\n                </h1>\n                <Button\n                    action={this.handleButtonPress}\n                    type={'primary'}\n                    title={'Return to Admin Console'}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ThankFormCreate;","/Users/animeshagrawal/Documents/Sheep/src/pages/adminConsole.jsx",["104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126"],"import React, { Component } from 'react';\nimport Button from '../components/Button';\nimport Amplify, { Auth } from 'aws-amplify';\nimport awsconfig from '../aws-exports';\n\nimport { API } from 'aws-amplify';\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\nimport gql from 'graphql-tag';\n\nimport CreatePage from '../pages/formCreator';\nimport { withAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react';\n\nimport * as queries from '../graphql/queries';\nimport * as mutations from '../graphql/mutations';\n\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom';\n\n\nclass ConsolePage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userID: '',\n            message: '',\n            call: false,\n            redirect: false,\n            apicall: false,\n            forms: [],\n            status: [],\n            buttons: [],\n            sent: [],\n            rendering: false,\n            redirectToManager: false,\n            formToRedirect: '',\n            statusToRedirect: false,\n            sentToRedirect: false,\n            redirectToHome: false,\n        }\n        this.handleButtonPress = this.handleButtonPress.bind(this);\n        this.handleManagerPress = this.handleManagerPress.bind(this);\n        this.getUserID = this.getUserID.bind(this);\n        this.setButtons = this.setButtons.bind(this);\n        this.redirectToHome = this.redirectToHome.bind(this);\n    }\n\n    handleButtonPress(e) {\n        e.preventDefault();\n        this.setState({ redirect: true });\n    }\n\n    handleManagerPress(e) {\n        e.preventDefault();\n        let name = e.target.name;\n        let status = e.target.value;\n        this.state.formToRedirect = name;\n        this.state.statusToRedirect = (status == 'true');\n        this.setState({ redirectToManager: true });\n    }\n\n    /* Retrieves the current userID. \n    Fetches their forms from the API. \n    Calls function to change button state so that user can select which of their forms to manage.*/\n    async getUserID() {\n        const user = await Auth.currentUserInfo();\n        console.log(user.username);\n        this.state.call = true;\n        this.setState({ userID: user.username });\n        const client = new AWSAppSyncClient({\n            url: awsconfig.aws_appsync_graphqlEndpoint,\n            region: awsconfig.aws_appsync_region,\n            disableOffline: true,\n            auth: {\n                type: AUTH_TYPE.API_KEY,\n                apiKey: awsconfig.aws_appsync_apiKey,\n            },\n        });\n        console.log(\"fetching api data\");\n        let apiData = '';\n        try {\n            apiData = await client.query({\n                query: gql(queries.getUsers),\n                variables: { id: this.state.userID }\n            });\n            console.log(\"api data fetched\");\n            console.log(apiData);\n        } catch (e) {\n            console.log(e);\n        }\n        if (apiData == '' || apiData.data.getUsers == null) {\n            try {\n                const mutData = await client.mutate({\n                    mutation: gql(mutations.createUsers),\n                    variables: { input: { id: this.state.userID } }\n                });\n            } catch (e) {\n                console.log(e);\n            }\n            console.log('normal retrieval');\n        } else {\n            var dict = apiData.data.getUsers.forms.items;\n            var arr = [];\n            var statusArr = [];\n            var sentArr = [];\n            for (var key in dict) {\n                arr.push((dict[key]).id);\n                statusArr.push((dict[key]).active);\n                sentArr.push((dict[key]).results);\n            }\n            this.state.forms = arr;\n            this.state.status = statusArr;\n            this.state.sent = sentArr;\n            console.log(this.state.forms);\n        }\n        (() => { this.setButtons(); })();\n    }\n\n    redirectToHome(e) {\n        e.preventDefault();\n        this.setState({\n            redirect: false,\n            call: false,\n            redirectToManager: false,\n            redirectToHome: true,\n        });\n    }\n\n    setButtons() {\n        var arr = [];\n        for (var p in this.state.forms) {\n            var button = <Button\n                action={this.handleManagerPress}\n                value={this.state.status[p]}\n                type={'primary'}\n                label={this.state.forms[p]}\n                title={this.state.forms[p]}\n            />\n            arr.push(button);\n        }\n        console.log(arr);\n        this.setState({ buttons: arr });\n    }\n\n    render() {\n        if (!this.state.call) {\n            console.log(\"calling admin api\");\n            (async () => { this.getUserID(); })();\n        }\n        // if (!this.state.rendering){\n        //     (() => { this.setButtons(); })();\n        // }\n        if (this.state.redirect) {\n            this.state.redirect = false;\n            this.state.call = false;\n            this.state.redirectToManager = false;\n            console.log(\"redirecting from admin\");\n            return <Redirect to={{\n                pathname: \"/createForm\",\n                state: { userID: this.state.userID }\n            }} />\n        }\n        if (this.state.redirectToHome) {\n            this.state.redirectToHome = false;\n            return <Redirect to={{\n                pathname: \"/\",\n            }} />\n        }\n        if (this.state.redirectToManager) {\n            this.state.redirect = false;\n            this.state.call = false;\n            this.state.redirectToManager = false;\n            console.log(\"redirecting to responses\");\n            return <Redirect to={{\n                pathname: \"/responseManager\",\n                state: {\n                    formID: this.state.formToRedirect,\n                    userID: this.state.userID,\n                    status: this.state.statusToRedirect,\n                }\n            }} />\n        }\n        return (\n            <div>\n                <AmplifySignOut />\n                <h1> Welcome to Admin Console! </h1>\n                {this.state.buttons}\n                <Button\n                    action={this.handleButtonPress}\n                    type={'primary'}\n                    title={'Create Game'}\n                />\n                <Button\n                    action={this.redirectToHome}\n                    type={'primary'}\n                    title={'Go back to Home Page'}\n                />\n            </div>\n        );\n    }\n}\n\nexport default withAuthenticator(ConsolePage);","/Users/animeshagrawal/Documents/Sheep/src/pages/userForm.jsx",["127","128","129","130","131","132","133","134","135","136","137","138","139"],"import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\n\nimport Input from '../components/Input';\nimport Button from '../components/Button';\nimport Textarea from '../components/Textarea';\nimport \"./CSS/userform.css\"\n\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom';\n\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\nimport awsconfig from '../aws-exports';\nimport gql from 'graphql-tag';\n\nimport * as queries from '../graphql/queries';\nimport * as mutations from '../graphql/mutations';\n\nclass MainPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fname: '',\n      lname: '',\n      email: '',\n      q1: '',\n      q2: '',\n      q3: '',\n      q4: '',\n      q5: '',\n      q6: '',\n      q7: '',\n      q8: '',\n      q9: '',\n      q10: '',\n      r1: '',\n      r2: '',\n      r3: '',\n      r4: '',\n      r5: '',\n      r6: '',\n      r7: '',\n      r8: '',\n      r9: '',\n      r10: '',\n      redirect: false,\n      error: false,\n      errorMessage: '',\n      call: false,\n      show: false,\n      matchingEmail: false,\n      numResponses: 10,\n      redirectHome: false,\n      instructions: false,\n    }\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.showNotification = this.showNotification.bind(this);\n    this.handleTextArea = this.handleTextArea.bind(this);\n    this.renderTextareas = this.renderTextareas.bind(this);\n    this.handleBackButton = this.handleBackButton.bind(this);\n    this.handleInstructions = this.handleInstructions.bind(this);\n    // this.setMessage = this.setMessage.bind(this);\n  }\n\n  showNotification(name) {\n    this.setState({\n      [name]: true,\n    });\n    setTimeout(() => {\n      this.setState({\n        [name]: false,\n      });\n    }, 2000);\n  }\n\n  async findForm() {\n    console.log(\"hi\");\n\n    const client = new AWSAppSyncClient({\n      url: awsconfig.aws_appsync_graphqlEndpoint,\n      region: awsconfig.aws_appsync_region,\n      disableOffline: true,\n      auth: {\n        type: AUTH_TYPE.API_KEY,\n        apiKey: awsconfig.aws_appsync_apiKey,\n      },\n    });\n    const apiData = await client.query({ query: gql(queries.getForm), variables: { id: this.props.location.state.code } });\n    if (apiData.data.getForm == null) {\n      this.state.call = true;\n      (() => { this.handleError(); })();\n    }\n    else {\n      this.state.call = true;\n      this.setState({\n        q1: apiData.data.getForm.q1,\n        q2: apiData.data.getForm.q2,\n        q3: apiData.data.getForm.q3,\n        q4: apiData.data.getForm.q4,\n        q5: apiData.data.getForm.q5,\n        q6: apiData.data.getForm.q6,\n        q7: apiData.data.getForm.q7,\n        q8: apiData.data.getForm.q8,\n        q9: apiData.data.getForm.q9,\n        q10: apiData.data.getForm.q10\n      });\n    }\n  }\n\n  handleInstructions(e) {\n    e.preventDefault();\n    this.setState({ instructions: !this.state.instructions });\n    if (!this.state.instructions) {\n      document.getElementById('container-fluid').style.opacity = \"0\";\n    } else {\n      document.getElementById('container-fluid').style.opacity = '1';\n    }\n  }\n\n\n  handleInput(e) {\n    let value = e.target.value;\n    let name = e.target.name;\n    this.setState({ [name]: value });\n    if (e.target.name == 'email') {\n      let re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n      if (!re.test(this.state.email)) {\n        this.setState({ invalidateEmail: true });\n      } else {\n        this.setState({ invalidateEmail: false });\n      }\n    }\n  }\n\n  handleTextArea(field) {\n    this.setState({ [field]: document.getElementById(field).value });\n  }\n\n  async handleFormSubmit(e) {\n    e.preventDefault();\n    let nullVal = false;\n    let elements = [this.state.fname, this.state.lname,\n    this.state.email, this.state.id,\n    this.state.r1, this.state.r2,\n    this.state.r3, this.state.r4,\n    this.state.r5, this.state.r6,\n    this.state.r7, this.state.r8,\n    this.state.r9, this.state.r10];\n    for (var text in elements) {\n      if (elements[text] == '') {\n        nullVal = true;\n        break;\n      }\n    }\n    if (nullVal == true) {\n      // this.setState({errorMessage: 'Uh-oh, make sure you have an input in all fields!'});\n      let show = 'show';\n      (() => { this.showNotification(show) })();\n    } else {\n      this.state.errorMessage = '';\n      const createRes = {\n        formID: this.props.location.state.code,\n        fname: this.state.fname,\n        lname: this.state.lname,\n        email: this.state.email,\n        r1: this.state.r1,\n        r2: this.state.r2,\n        r3: this.state.r3,\n        r4: this.state.r4,\n        r5: this.state.r5,\n        r6: this.state.r6,\n        r7: this.state.r7,\n        r8: this.state.r8,\n        r9: this.state.r9,\n        r10: this.state.r10,\n      }\n      const client = new AWSAppSyncClient({\n        url: awsconfig.aws_appsync_graphqlEndpoint,\n        region: awsconfig.aws_appsync_region,\n        disableOffline: true,\n        auth: {\n          type: AUTH_TYPE.API_KEY,\n          apiKey: awsconfig.aws_appsync_apiKey,\n        },\n      });\n      try {\n        const newResponse = await client.mutate({ mutation: gql(mutations.createResponses), variables: { input: createRes } });\n        this.setState({ redirect: true });\n      } catch (e) {\n        let match = 'matchingEmail';\n        (() => { this.showNotification(match) })();\n      }\n    }\n  }\n\n  handleBackButton(e) {\n    e.preventDefault();\n    this.setState({ redirectHome: true });\n  }\n\n  handleError() {\n    console.log('error reached');\n    this.setState({ error: true });\n  }\n\n  renderTextareas() {\n    let arr = [];\n    for (var i = 1; i <= this.state.numResponses; i++) {\n      let response = 'r' + i;\n      let question = 'q' + i;\n      arr.push(<p>{this.state[question]}</p>);\n      arr.push(<Textarea\n        id={response}\n        value={this.state[response]}\n        placeholder={'Response ' + i}\n        handleChange={() => this.handleTextArea(response)} />)\n    }\n    return arr;\n  }\n\n\n  render() {\n    if (this.state.redirectHome) {\n      this.state.redirectHome = false;\n      return <Redirect to={{ pathname: \"/\" }} />\n    }\n    if (!this.state.call) {\n      (async () => { await this.findForm(); })();\n    }\n    if (this.state.redirect) {\n      console.log(\"call thank you page\");\n      this.state.redirect = false;\n      return <Redirect to={{ pathname: \"/thankYou\" }} />\n    }\n    if (this.state.error) {\n      console.log(\"recall landing page\");\n      this.state.error = false;\n      return <Redirect to={{\n        pathname: \"/\",\n        state: {\n          message: \"Oops... the code you entered isn't valid. Try another one :)\",\n          show: true,\n        }\n      }} />\n    }\n    // (() => { this.setMessage(); })();\n    return (\n      <div className=\"container\">\n\n        {this.state.instructions && <Instructions toggle={this.handleInstructions} />}\n        <Helmet>\n          <link rel=\"stylesheet\" href=\"userform.css\" />\n          {/* <style>{'body { background-image: url(${background}); }'}</style> */}\n        </Helmet>\n        <div className=\"backButton\">\n          <Button\n            action={this.handleBackButton}\n            type={'primary'}\n            title={'Back To Home'}\n          /> { /*Submit */}\n        </div>\n        <div className='formContainer' id=\"container-fluid\">\n          <form className=\"container-fluid\" onSubmit={this.handleFormSubmit}>\n\n            <Button\n              action={this.handleInstructions}\n              type={'primary'}\n              title={'Instructions'}\n            /> { /*Submit */}\n\n            <Input inputType={'text'}\n              title={'First Name:'}\n              name={'fname'}\n              style={{ margin: 10 }}\n              value={this.state.fname}\n              placeholder={'First Name'}\n              handleChange={this.handleInput}\n\n            /> {/* Last name */}\n\n            <Input inputType={'text'}\n              title={'Last Name:'}\n              name={'lname'}\n              style={{ margin: 10 }}\n              value={this.state.lname}\n              placeholder={'Last Name'}\n              handleChange={this.handleInput}\n\n            /> {/* Last name */}\n\n            <Input inputType={'email'}\n              title={'Email:'}\n              name={'email'}\n              style={{ margin: 10 }}\n              value={this.state.email}\n              placeholder={'Email'}\n              handleChange={this.handleInput}\n\n            /> {/* email */}\n\n            {this.state.invalidateEmail && <p className=\"emailError\"> Please enter a valid email! </p>}\n\n            {this.renderTextareas()}\n\n            {/* <p>{this.state.q1}</p>\n\n            <Textarea \n              id={'r1'}\n              value={this.state.r1}\n              placeholder={'Response 1'}\n              handleChange={() => this.handleTextArea('r1')}\n\n            /> \n\n            <p>{this.state.q2}</p>\n\n            <Textarea \n              id={'r2'}\n              value={this.state.r1}\n              placeholder={'Response 2'}\n              handleChange={() => this.handleTextArea('r2')}\n\n            /> \n\n            <p>{this.state.q3}</p>\n            <Textarea \n              id={'r3'}\n              value={this.state.r1}\n              placeholder={'Response 3'}\n              handleChange={() => this.handleTextArea('r3')}\n\n            /> \n\n            <p>{this.state.q4}</p>\n            <Input inputType={'text'}\n              name={'r4'}\n              value={this.state.r4}\n              placeholder={'Response 4'}\n              handleChange={this.handleInput}\n\n            /> \n\n\n            <p>{this.state.q5}</p>\n            <Input inputType={'text'}\n              name={'r5'}\n              value={this.state.r5}\n              placeholder={'Response 5'}\n              handleChange={this.handleInput}\n\n            /> \n\n            <p>{this.state.q6}</p>\n            <Input inputType={'text'}\n              name={'r6'}\n              value={this.state.r6}\n              placeholder={'Response 6'}\n              handleChange={this.handleInput}\n\n            /> \n\n            <p>{this.state.q7}</p>\n            <Input inputType={'text'}\n              name={'r7'}\n              value={this.state.r7}\n              placeholder={'Response 7'}\n              handleChange={this.handleInput}\n\n            /> \n\n            <p>{this.state.q8}</p>\n            <Input inputType={'text'}\n              name={'r8'}\n              value={this.state.r8}\n              placeholder={'Response 8'}\n              handleChange={this.handleInput}\n\n            />\n\n            <p>{this.state.q9}</p>\n            <Input inputType={'text'}\n              name={'r9'}\n              value={this.state.r9}\n              placeholder={'Response 9'}\n              handleChange={this.handleInput}\n\n            /> \n\n            <p>{this.state.q10}</p>\n            <Input inputType={'text'}\n              name={'r10'}\n              value={this.state.r10}\n              placeholder={'Response 10'}\n              handleChange={this.handleInput}\n\n            />  */}\n\n            <div className=\"submitButton\">\n              <Button\n                action={this.handleFormSubmit}\n                disabled={this.state.invalidateEmail}\n                type={'primary'}\n                title={'Submit'}\n              /> { /*Submit */}\n            </div>\n\n            <Notification show={this.state.show} />\n            <Notification match={this.state.matchingEmail} />\n          </form>\n\n\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Notification extends React.Component {\n  render() {\n    return (\n      <div className=\"notifications\">\n        <span className={this.props.show ? 'show' : ''}> Uh-oh, make sure you have an input in all fields! </span>\n        <span className={this.props.match ? 'match' : ''}> The email you entered has already been used! </span>\n      </div>\n    )\n  }\n}\n\nclass Instructions extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  handleClose(e) {\n    e.preventDefault();\n    this.props.toggle(e);\n  }\n  render() {\n    return (\n      <div className=\"popup\">\n        <div className=\"popup-content\">\n          <div className=\"words\">\n            <h3> Welcome to Sheep! </h3>\n            <p> Your score per category will be the number of responses that were the same as yours. You don’t need to pick the correct answer, a clever answer, or a unique answer — you should pick the most common answer, aka the Sheep answer. (Like Family Feud.) </p>\n            <p> For example, in a 30-player game: </p>\n            <div className=\"example\">\n              <p> Category: A television manufacturer</p>\n\n              <p>Responses:</p>\n              <p>Samsung - 15</p>\n              <p>Sony - 10</p>\n              <p>LG - 5</p>\n            </div>\n            <p>If you put Sony, you would receive 10 points for this round.</p>\n            <ul>\n              <li>Common answers will be grouped at my discretion (e.g., \"child\" and \"kid\").</li>\n              <li>Please don't submit multiple responses to the same question (e.g., \"Pop/Rock/Rap\"). If you do, I will just pick the first thing you submitted as your answer (\"Pop\").</li>\n              <li>You can use any reference or technology to help pick your responses.</li>\n              <li>You cannot speak with anyone else about your answers until the scores are revealed. I'll disqualify any players suspected of collusion.</li>\n            </ul>\n            <p>Last reminder, you're trying to get the SHEEP answer, not the right answer!</p>\n            <p>Good luck!</p>\n            <Button\n              action={this.handleClose}\n              type={'primary'}\n              title={'Close'}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default MainPage;","/Users/animeshagrawal/Documents/Sheep/src/pages/404.jsx",[],"/Users/animeshagrawal/Documents/Sheep/src/pages/formEditor.jsx",["140","141","142","143","144","145","146","147","148"],"import React, { Component } from 'react';\n\nimport * as mutations from '../graphql/mutations';\nimport * as queries from '../graphql/queries';\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\nimport awsconfig from '../aws-exports';\nimport gql from 'graphql-tag';\n\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom';\n\nimport Input from '../components/Input';\nimport Button from '../components/Button';\nimport Textarea from '../components/Textarea';\n\n\nclass EditPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.location.state.formID,\n            userID: this.props.location.state.userID,\n            q1: '',\n            q2: '',\n            q3: '',\n            q4: '',\n            q5: '',\n            q6: '',\n            q7: '',\n            q8: '',\n            q9: '',\n            q10: '',\n            redirect: false,\n            error: '',\n            callQuery: false,\n            numResponses: 10\n        }\n        this.handleFormSubmit = this.handleFormSubmit.bind(this);\n        this.handleInput = this.handleInput.bind(this);\n        this.renderTextareas = this.renderTextareas.bind(this);\n        this.handleTextArea = this.handleTextArea.bind(this);\n    }\n\n    handleInput(e) {\n        let value = e.target.value;\n        let name = e.target.name;\n        this.setState({ [name]: value });\n    }\n\n    async findForm() {\n        const client = new AWSAppSyncClient({\n            url: awsconfig.aws_appsync_graphqlEndpoint,\n            region: awsconfig.aws_appsync_region,\n            disableOffline: true,\n            auth: {\n                type: AUTH_TYPE.API_KEY,\n                apiKey: awsconfig.aws_appsync_apiKey,\n            },\n        });\n        const apiData = await client.query({ query: gql(queries.getForm), variables: { id: this.props.location.state.formID } });\n        if (apiData.data.getForm == null) {\n            this.state.callQuery = true;\n            (() => { this.handleError(); })();\n        }\n        else {\n            this.setState({\n                q1: apiData.data.getForm.q1,\n                q2: apiData.data.getForm.q2,\n                q3: apiData.data.getForm.q3,\n                q4: apiData.data.getForm.q4,\n                q5: apiData.data.getForm.q5,\n                q6: apiData.data.getForm.q6,\n                q7: apiData.data.getForm.q7,\n                q8: apiData.data.getForm.q8,\n                q9: apiData.data.getForm.q9,\n                q10: apiData.data.getForm.q10,\n                callQuery: true\n            });\n        }\n    }\n\n    handleTextArea(field) {\n        this.setState({ [field]: document.getElementById(field).value });\n    }\n\n    renderTextareas() {\n        let arr = [];\n        for (var i = 1; i <= this.state.numResponses; i++) {\n            console.log(\"iteration\" + i);\n            let question = 'q' + i;\n            arr.push(<Textarea\n                id={question}\n                value={this.state[question]}\n                name={'Question ' + i}\n                placeholder={'Question ' + i}\n                handleChange={() => this.handleTextArea(question)} />)\n        }\n        return arr;\n    }\n\n    async handleFormSubmit(e) {\n        e.preventDefault();\n        let nullVal = false;\n        let elements = [this.state.q1,\n        this.state.q2, this.state.q3,\n        this.state.q4, this.state.q5,\n        this.state.q6, this.state.q7,\n        this.state.q8, this.state.q9, this.state.q10];\n        for (var key in elements) {\n            if (elements[key] == '') {\n                nullVal = true;\n                break;\n            }\n        }\n        if (nullVal == true) {\n            this.setState({ error: 'Uh-oh, make sure you have inputted all questions!' });\n        } else {\n            this.state.error = '';\n            const createF = {\n                id: this.state.id,\n                formUserId: this.state.userID,\n                userID: this.state.userID,\n                q1: this.state.q1,\n                q2: this.state.q2,\n                q3: this.state.q3,\n                q4: this.state.q4,\n                q5: this.state.q5,\n                q6: this.state.q6,\n                q7: this.state.q7,\n                q8: this.state.q8,\n                q9: this.state.q9,\n                q10: this.state.q10,\n            }\n            const client = new AWSAppSyncClient({\n                url: awsconfig.aws_appsync_graphqlEndpoint,\n                region: awsconfig.aws_appsync_region,\n                disableOffline: true,\n                auth: {\n                    type: AUTH_TYPE.API_KEY,\n                    apiKey: awsconfig.aws_appsync_apiKey,\n                },\n            });\n            const newGame = await client.mutate({ mutation: gql(mutations.updateForm), variables: { input: createF } });\n            this.setState({ redirect: true });\n        }\n    }\n\n    render() {\n        if (!this.state.callQuery) {\n            (async () => { await this.findForm(); })();\n        }\n\n        if (this.state.redirect) {\n            this.state.redirect = false;\n            return <Redirect to={{\n                pathname: \"/adminConsole\"\n            }} />\n        }\n        return (\n            <div>\n                <h1> Edit Your Game: {this.state.id} </h1>\n                <form className=\"container-fluid\" onSubmit={this.handleFormSubmit}>\n\n                    {/* <Input inputType={'text'}\n          title={'Name:'}\n          name={'fname'}\n          value={this.state.fname}\n          placeholder={'First name'}\n          handleChange={this.handleInput}\n\n        />  */}\n                    {this.renderTextareas()}\n\n                    {/* <Input inputType={'text'}\n                        title={'Question 1:'}\n                        name={'q1'}\n                        value={this.state.q1}\n                        placeholder={'Question 1'}\n                        handleChange={this.handleInput}\n\n                    /> \n\n                    <Input inputType={'text'}\n                        title={'Question 2:'}\n                        name={'q2'}\n                        value={this.state.q2}\n                        placeholder={'Question 2'}\n                        handleChange={this.handleInput}\n\n                    /> \n\n                    <Input inputType={'text'}\n                        title={'Question 3:'}\n                        name={'q3'}\n                        value={this.state.q3}\n                        placeholder={'Question 3'}\n                        handleChange={this.handleInput}\n\n                    /> \n\n                    <Input inputType={'text'}\n                        title={'Question 4:'}\n                        name={'q4'}\n                        value={this.state.q4}\n                        placeholder={'Question 4'}\n                        handleChange={this.handleInput}\n\n                    /> \n\n                    <Input inputType={'text'}\n                        title={'Question 5:'}\n                        name={'q5'}\n                        value={this.state.q5}\n                        placeholder={'Question 5'}\n                        handleChange={this.handleInput}\n\n                    /> \n\n                    <Input inputType={'text'}\n                        title={'Question 6:'}\n                        name={'q6'}\n                        value={this.state.q6}\n                        placeholder={'Question 6'}\n                        handleChange={this.handleInput}\n\n                    /> \n\n                    <Input inputType={'text'}\n                        title={'Question 7:'}\n                        name={'q7'}\n                        value={this.state.q7}\n                        placeholder={'Question 7'}\n                        handleChange={this.handleInput}\n\n                    />\n\n                    <Input inputType={'text'}\n                        title={'Question 8:'}\n                        name={'q8'}\n                        value={this.state.q8}\n                        placeholder={'Question 8'}\n                        handleChange={this.handleInput}\n\n                    /> \n\n                    <Input inputType={'text'}\n                        title={'Question 9:'}\n                        name={'q9'}\n                        value={this.state.q9}\n                        placeholder={'Question 9'}\n                        handleChange={this.handleInput}\n\n                    />\n\n                    <Input inputType={'text'}\n                        title={'Question 10:'}\n                        name={'q10'}\n                        value={this.state.q10}\n                        placeholder={'Question 10'}\n                        handleChange={this.handleInput}\n\n                    />  */}\n\n                    <Button\n                        action={this.handleFormSubmit}\n                        type={'primary'}\n                        title={'Submit'}\n                    /> { /*Submit */}\n\n                </form>\n                {this.state.error}\n            </div>\n        );\n    }\n}\n\nexport default EditPage;","/Users/animeshagrawal/Documents/Sheep/src/pages/thankPage.jsx",["149","150","151","152","153","154"],"import React, { Component } from 'react';\nimport LandPage from '../pages/landingForm';\nimport Button from '../components/Button';\nimport './CSS/thankpage.css'\n\nimport {BrowserRouter as Router, Route, Switch, Link, Redirect} from 'react-router-dom';\n\nclass ThankPage extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      redirect: false,\n    }\n    this.handleButtonPress = this.handleButtonPress.bind(this);\n  }\n\n\n  handleButtonPress(e) {\n    e.preventDefault();\n    this.setState({ redirect: true });\n  }\n\n  render() {\n    if (this.state.redirect){\n      this.state.redirect = false;\n      return <Redirect to = {{pathname: \"/\" }}/>\n  }\n    return (\n      <div className = 'containerThank'>\n        <div className = 'content'>\n        <h1>\n          Thanks for playing!\n            </h1>\n        <h3>\n          Be sure to check back at the end of the week for results.\n            </h3>\n        <Button\n          action={this.handleButtonPress}\n          type={'primary'}\n          title={'Return to Home Page'}\n        />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ThankPage;","/Users/animeshagrawal/Documents/Sheep/src/pages/formCreator.jsx",["155","156","157","158","159","160","161","162"],"import React, { Component } from 'react';\nimport { Helmet } from \"react-helmet\";\nimport \"./CSS/formcreator.css\"\n\nimport * as mutations from '../graphql/mutations';\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\nimport awsconfig from '../aws-exports';\nimport gql from 'graphql-tag';\n\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom';\n\nimport Input from '../components/Input';\nimport Button from '../components/Button';\nimport Textarea from '../components/Textarea';\n\n\nclass CreatePage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userID: this.props.location.state.userID,\n            id: '',\n            q1: '',\n            q2: '',\n            q3: '',\n            q4: '',\n            q5: '',\n            q6: '',\n            q7: '',\n            q8: '',\n            q9: '',\n            q10: '',\n            redirect: false,\n            error: '',\n            show: false,\n            match: false,\n            numResponses: 10\n        }\n        this.handleFormSubmit = this.handleFormSubmit.bind(this);\n        this.handleInput = this.handleInput.bind(this);\n        this.showNotification = this.showNotification.bind(this);\n        this.showNotificationIDMatch = this.showNotificationIDMatch.bind(this);\n        this.renderTextareas = this.renderTextareas.bind(this);\n        this.handleTextArea = this.handleTextArea.bind(this);\n    }\n\n    handleInput(e) {\n        let value = e.target.value;\n        let valueWidth = value.length;\n        let name = e.target.name;\n        document.getElementById(name).style.width = (valueWidth.toString() + \"vmin\");\n        this.setState({ [name]: value });\n    }\n\n    showNotification() {\n        this.setState({\n            show: true,\n        });\n        setTimeout(() => {\n            this.setState({\n                show: false,\n            });\n        }, 2000);\n    }\n    showNotificationIDMatch() {\n        this.setState({\n            match: true,\n        });\n        setTimeout(() => {\n            this.setState({\n                match: false,\n            });\n        }, 2000);\n        console.log(\"showidmatch\");\n    }\n\n    async handleFormSubmit(e) {\n        e.preventDefault();\n        let nullVal = false;\n        let elements = [this.state.id, this.state.q1,\n        this.state.q2, this.state.q3,\n        this.state.q4, this.state.q5,\n        this.state.q6, this.state.q7,\n        this.state.q8, this.state.q9, this.state.q10];\n        for (var key in elements) {\n            if (elements[key] == '') {\n                nullVal = true;\n                break;\n            }\n        }\n        if (nullVal == true) {\n            (() => { this.showNotification() })();\n        } else {\n            const createF = {\n                id: this.state.id,\n                formUserId: this.state.userID,\n                userID: this.state.userID,\n                active: true,\n                results: false,\n                q1: this.state.q1,\n                q2: this.state.q2,\n                q3: this.state.q3,\n                q4: this.state.q4,\n                q5: this.state.q5,\n                q6: this.state.q6,\n                q7: this.state.q7,\n                q8: this.state.q8,\n                q9: this.state.q9,\n                q10: this.state.q10,\n            }\n            const client = new AWSAppSyncClient({\n                url: awsconfig.aws_appsync_graphqlEndpoint,\n                region: awsconfig.aws_appsync_region,\n                disableOffline: true,\n                auth: {\n                    type: AUTH_TYPE.API_KEY,\n                    apiKey: awsconfig.aws_appsync_apiKey,\n                },\n            });\n            try {\n                const newGame = await client.mutate({ mutation: gql(mutations.createForm), variables: { input: createF } });\n                this.setState({ redirect: true });\n            }\n            catch (e) {\n                console.log(e);\n                (() => { this.showNotificationIDMatch() })();\n            }\n        }\n    }\n\n    handleTextArea(field) {\n        this.setState({ [field]: document.getElementById(field).value });\n    }\n\n    renderTextareas() {\n        let arr = [];\n        for (var i = 1; i <= this.state.numResponses; i++) {\n            let question = 'q' + i;\n            arr.push(<Textarea\n                id={question}\n                value={this.state[question]}\n                name = {'Question ' + i}\n                placeholder={'Question ' + i}\n                handleChange={() => this.handleTextArea(question)} />)\n        }\n        return arr;\n    }\n\n    render() {\n        if (this.state.redirect) {\n            this.state.redirect = false;\n            return <Redirect to={{\n                pathname: \"/formCreated\",\n                state: { code: this.state.id }\n            }} />\n        }\n        return (\n            <div>\n                <Helmet>\n                    <link rel=\"stylesheet\" href=\"formcreator.css\" />\n                </Helmet>\n                <h1> Create a Game! </h1>\n                <form className=\"container-fluid\" onSubmit={this.handleFormSubmit}>\n\n                    {/* <Input inputType={'text'}\n          title={'Name:'}\n          name={'fname'}\n          value={this.state.fname}\n          placeholder={'First name'}\n          handleChange={this.handleInput}\n\n        />  */}\n\n\n                 <Input inputType={'text'}\n                        title={'ID:'}\n                        name={'id'}\n                        value={this.state.id}\n                        placeholder={'ID'}\n                        handleChange={this.handleInput}\n\n                    /> \n\n                {this.renderTextareas()}\n\n                 {/*   <Input inputType={'text'}\n                        title={'Question 1:'}\n                        name={'q1'}\n                        value={this.state.q1}\n                        placeholder={'Question 1'}\n                        handleChange={this.handleInput}\n\n                    /> \n\n                    <Input inputType={'text'}\n                        title={'Question 2:'}\n                        name={'q2'}\n                        value={this.state.q2}\n                        placeholder={'Question 2'}\n                        handleChange={this.handleInput}\n\n                    /> \n\n                    <Input inputType={'text'}\n                        title={'Question 3:'}\n                        name={'q3'}\n                        value={this.state.q3}\n                        placeholder={'Question 3'}\n                        handleChange={this.handleInput}\n\n                    /> \n\n                    <Input inputType={'text'}\n                        title={'Question 4:'}\n                        name={'q4'}\n                        value={this.state.q4}\n                        placeholder={'Question 4'}\n                        handleChange={this.handleInput}\n\n                    /> \n\n                    <Input inputType={'text'}\n                        title={'Question 5:'}\n                        name={'q5'}\n                        value={this.state.q5}\n                        placeholder={'Question 5'}\n                        handleChange={this.handleInput}\n\n                    /> \n\n                    <Input inputType={'text'}\n                        title={'Question 6:'}\n                        name={'q6'}\n                        value={this.state.q6}\n                        placeholder={'Question 6'}\n                        handleChange={this.handleInput}\n\n                    /> \n\n                    <Input inputType={'text'}\n                        title={'Question 7:'}\n                        name={'q7'}\n                        value={this.state.q7}\n                        placeholder={'Question 7'}\n                        handleChange={this.handleInput}\n\n                    /> \n\n                    <Input inputType={'text'}\n                        title={'Question 8:'}\n                        name={'q8'}\n                        value={this.state.q8}\n                        placeholder={'Question 8'}\n                        handleChange={this.handleInput}\n\n                    />\n\n                    <Input inputType={'text'}\n                        title={'Question 9:'}\n                        name={'q9'}\n                        value={this.state.q9}\n                        placeholder={'Question 9'}\n                        handleChange={this.handleInput}\n\n                    /> \n\n                    <Input inputType={'text'}\n                        title={'Question 10:'}\n                        name={'q10'}\n                        value={this.state.q10}\n                        placeholder={'Question 10'}\n                        handleChange={this.handleInput}\n\n                    />  */}\n\n                    <Button\n                        action={this.handleFormSubmit}\n                        type={'primary'}\n                        title={'Submit'}\n                    /> { /*Submit */}\n\n                </form>\n                <div>\n                    <Notification show={this.state.show} />\n                    <Notification match={this.state.match} />\n                </div>\n            </div>\n        );\n    }\n}\nclass Notification extends React.Component {\n    render() {\n        return (\n            <div>\n                <span className={this.props.show ? 'show' : ''}> Uh-oh, make sure you have an input in all fields! </span>\n                <span className={this.props.match ? 'match' : ''}> Uh-oh, that ID is taken! Please try another one. </span>\n            </div>\n        )\n    }\n}\n\nexport default CreatePage;\n\n//this is the createpage tag part 2 because it wont work","/Users/animeshagrawal/Documents/Sheep/src/pages/resultsPage.jsx",["163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178"],"import React, { Component } from 'react';\nimport LandingFormContainer from '../containers/LandingFormContainer';\nimport \"./CSS/resultspage.css\"\n\nimport Input from '../components/Input';\nimport Button from '../components/Button';\n\nimport * as queries from '../graphql/queries';\nimport * as mutations from '../graphql/mutations';\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\nimport awsconfig from '../aws-exports';\nimport gql from 'graphql-tag';\n\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom';\n\nclass ResultsPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.location.state.code,\n            call: false,\n            email: '',\n            winners: [{ fname: '', lname: '', r10_sum: 0 }, { fname: '', lname: '', r10_sum: 0 }, { fname: '', lname: '', r10_sum: 0 }],\n            userIndex: 0,\n            responses: [{ email: '' }],\n            formData: { q1: '' },\n            userResponses: { r1: '' },\n            results: false,\n            show: false,\n        }\n        this.handleSort = this.handleSort.bind(this);\n        this.compareByKey = this.compareByKey.bind(this);\n        this.fetchWinners = this.fetchWinners.bind(this);\n        this.handleInput = this.handleInput.bind(this);\n        this.handleSubmitEmail = this.handleSubmitEmail.bind(this);\n        this.showUserResults = this.showUserResults.bind(this);\n        this.showNotification = this.showNotification.bind(this);\n        this.createDivs = this.createDivs.bind(this);\n        this.showDiv = this.showDiv.bind(this);\n    }\n\n    async fetchWinners() {\n        const client = new AWSAppSyncClient({\n            url: awsconfig.aws_appsync_graphqlEndpoint,\n            region: awsconfig.aws_appsync_region,\n            disableOffline: true,\n            auth: {\n                type: AUTH_TYPE.API_KEY,\n                apiKey: awsconfig.aws_appsync_apiKey,\n            },\n        });\n        let apiData = '';\n        let formData = '';\n        try {\n            apiData = await client.query({\n                query: gql(queries.getFormResponseList),\n                variables: { id: this.state.id }\n            });\n            formData = await client.query({\n                query: gql(queries.getForm),\n                variables: { id: this.state.id }\n            });\n            console.log(apiData);\n            console.log(\"results fetched\");\n            this.state.call = true;\n        } catch (e) {\n            console.log(e);\n        }\n        if (apiData == '' || apiData.data.getFormResponseList == null) {\n            try {\n                const mutData = await client.mutate({\n                    mutation: gql(mutations.createFormResponseList),\n                    variables: { input: { id: this.state.id } }\n                });\n                this.state.call = true;\n            } catch (e) {\n                console.log(e);\n            }\n        } else {\n            let responses = apiData.data.getFormResponseList.forms.items;\n            let copyResponses = responses;\n            copyResponses.sort(this.compareByKey('r10_sum'));\n            this.setState({\n                formData: formData.data.getForm,\n                results: formData.data.getForm.results,\n                responses: responses,\n                winners: copyResponses.slice(0, 3),\n            });\n        }\n    }\n\n    showNotification() {\n        this.setState({\n            show: true,\n        });\n        setTimeout(() => {\n            this.setState({\n                show: false,\n            });\n        }, 2000);\n    }\n\n    handleSort(key) {\n        let copyResponses = [...this.state.responses];\n        copyResponses.sort(this.compareByKey(key));\n        this.setState({ responses: copyResponses });\n    }\n\n    compareByKey(key) {\n        return function (a, b) {\n            if (a[key] < b[key]) return -1; // check for value if the second value is bigger then first return -1\n            if (a[key] > b[key]) return 1;  //check for value if the second value is bigger then first return 1\n            return 0;\n        }\n    }\n\n    handleInput(e) {\n        let value = e.target.value;\n        let name = e.target.name;\n        this.setState({ [name]: value });\n    }\n\n    async handleSubmitEmail(e) {\n        e.preventDefault();\n        let nullVal = false;\n        if (this.state.email == '') {\n            (() => { this.showNotification() })();\n        } else {\n            const client = new AWSAppSyncClient({\n                url: awsconfig.aws_appsync_graphqlEndpoint,\n                region: awsconfig.aws_appsync_region,\n                disableOffline: true,\n                auth: {\n                    type: AUTH_TYPE.API_KEY,\n                    apiKey: awsconfig.aws_appsync_apiKey,\n                },\n            });\n            let apiData = '';\n            try {\n                apiData = await client.query({\n                    query: gql(queries.getResponseCleaned),\n                    variables: { formID: this.state.id, email: this.state.email }\n                });\n                console.log(apiData.data.getResponseCleaned);\n            } catch (e) {\n                console.log(e);\n            }\n            if (apiData == '' || apiData.data.getResponseCleaned == null) {\n                (() => { this.showNotification(); })();\n            } else {\n                let responses = this.state.responses;\n                for (var index in responses) {\n                    if (responses[index].email == this.state.email) {\n                        this.setState({\n                            userResponses: apiData.data.getResponseCleaned,\n                            userIndex: index\n                        });\n                        (() => { this.showDiv() })();\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    createDivs(question, response, points) {\n        const user = this.state.responses[this.state.userIndex];\n        const userResponses = this.state.userResponses;\n        const formData = this.state.formData;\n        console.log(userResponses);\n        const fname = user.fname;\n        const lname = user.lname;\n        const totPoints = user.r10_sum;\n        var obj = { id: 'variables' }\n        obj.p1 = user.r1;\n        obj.p2 = user.r2;\n        obj.p3 = user.r3;\n        obj.p4 = user.r4;\n        obj.p5 = user.r5;\n        obj.p6 = user.r6;\n        obj.p7 = user.r7;\n        obj.p8 = user.r8;\n        obj.p9 = user.r9;\n        obj.p10 = user.r10;\n        obj.r1 = userResponses.r1;\n        obj.r2 = userResponses.r2;\n        obj.r3 = userResponses.r3;\n        obj.r4 = userResponses.r4;\n        obj.r5 = userResponses.r5;\n        obj.r6 = userResponses.r6;\n        obj.r7 = userResponses.r7;\n        obj.r8 = userResponses.r8;\n        obj.r9 = userResponses.r9;\n        obj.r10 = userResponses.r10;\n        obj.q1 = formData.q1;\n        obj.q2 = formData.q2;\n        obj.q3 = formData.q3;\n        obj.q4 = formData.q4;\n        obj.q5 = formData.q5;\n        obj.q6 = formData.q6;\n        obj.q7 = formData.q7;\n        obj.q8 = formData.q8;\n        obj.q9 = formData.q9;\n        obj.q10 = formData.q10;\n        return (\n            <div className='result-container'>\n                <div className=\"question\">\n                    {obj[question]}\n                </div>\n                <div className=\"response\">\n                    {obj[response]}\n                </div>\n                <div className=\"points\">\n                    {obj[points]}\n                </div>\n            </div>\n        )\n    }\n    showDiv() {\n        document.getElementById(\"final-result\").style.display = \"block\";\n    }\n\n    showUserResults() {\n        const user = this.state.responses[this.state.userIndex];\n        const userResponses = this.state.userResponses;\n        const formData = this.state.formData;\n        console.log(userResponses);\n        const fname = user.fname;\n        const lname = user.lname;\n        const totPoints = user.r10_sum;\n        var arr = [];\n        for (var i = 1; i <= 10; i++) {\n            arr.push(this.createDivs(('q' + i), ('r' + i), ('p' + i)));\n        };\n        return (\n            <div id=\"final-result\">\n\n                <div className=\"userName\">\n                    {fname} {lname}\n                </div>\n                <div className=\"totPoints\">\n                    {totPoints}\n                    <p id=\"numPoints\"> points</p>\n                </div>\n                <div className='result-container2'>\n                    <div className=\"question\">\n                        Question:\n                    </div>\n                    <div className=\"response\">\n                        Your Response:\n                    </div>\n                    <div className=\"points\">\n                        Points Earned:\n                    </div>\n                </div>\n                {arr}\n            </div>\n\n        )\n    }\n\n\n    render() {\n        if (!this.state.call) {\n            (async () => { this.fetchWinners(); })();\n        }\n        if (this.state.results) {\n            return (\n                <div className=\"resultsPage\">\n                    <div className = \"resultspage-container\">\n                    <div id=\"podium-box\" className=\"row\">\n                        <div className=\"col-md-4 step-container m-0 p-0\">\n                            <div>\n                                {this.state.winners[1].fname} {this.state.winners[1].lname}\n                            </div>\n                            <div id=\"second-step\" className=\"bg-blue step centerBoth podium-number\">\n                                {this.state.winners[1].r10_sum} points\n                     </div>\n                        </div>\n                        <div className=\"col-md-4 step-container m-0 p-0\">\n                            <div>\n                                {this.state.winners[0].fname} {this.state.winners[0].lname}\n                            </div>\n                            <div id=\"first-step\" className=\"bg-blue step centerBoth podium-number\">\n                                {this.state.winners[0].r10_sum} points\n                    </div>\n                        </div>\n                        <div className=\"col-md-4 step-container m-0 p-0\">\n                            <div>\n                                {this.state.winners[2].fname} {this.state.winners[2].lname}\n                            </div>\n                            <div id=\"third-step\" className=\"bg-blue step centerBoth podium-number\">\n                                {this.state.winners[2].r10_sum} points\n                    </div>\n                        </div>\n                    </div>\n                    <div className=\"nameButton\">\n                        <Input inputType={'text'}\n                            title={'Your email:'}\n                            name={'email'}\n                            style={{ margin: 10 }}\n                            value={this.state.email}\n                            placeholder={'Email'}\n                            handleChange={this.handleInput}\n\n                        /> {/* First name */}\n                        <Button\n                            action={this.handleSubmitEmail}\n                            type={'primary'}\n                            title={'Submit'}\n                        /> { /*Submit */}\n                    </div>\n                    <Notification show={this.state.show} />\n                    {this.showUserResults()}\n                    </div>\n                </div>\n            );\n        } else {\n            return <p> The results for this form are not available yet. Please check back later!</p>\n        }\n    }\n}\n\nclass Notification extends React.Component {\n    render() {\n        return <span className={this.props.show ? 'show' : ''}> Uh-oh, make sure you have entered a valid email! </span>\n    }\n}\n\nexport default ResultsPage;","/Users/animeshagrawal/Documents/Sheep/src/pages/matchingPage.jsx",["179","180","181","182","183","184","185","186","187","188","189"],"import React, { Component } from 'react';\nimport Input from '../components/Input';\nimport Button from '../components/Button';\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom';\nimport Loader from 'react-loader-spinner'\n\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\nimport awsconfig from '../aws-exports';\nimport gql from 'graphql-tag';\n\nimport * as queries from '../graphql/queries';\nimport * as mutations from '../graphql/mutations';\nclass MatchingPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.location.state.formID,\n            currentRound: \"r1\",\n            words: [],\n            input: '',\n            returnWords: [],\n            call: false,\n            checks: [],\n            loading: false,\n            redirectToResponse: false,\n        }\n        this.getObjects = this.getObjects.bind(this);\n        this.setCheckboxes = this.setCheckboxes.bind(this);\n        this.handleStep1Submit = this.handleStep1Submit.bind(this);\n        this.handleInput = this.handleInput.bind(this);\n        this.generateRoundButtons = this.generateRoundButtons.bind(this);\n        this.redirectToResponses = this.redirectToResponses.bind(this);\n    }\n\n    async getObjects() {\n        const client = new AWSAppSyncClient({\n            url: awsconfig.aws_appsync_graphqlEndpoint,\n            region: awsconfig.aws_appsync_region,\n            disableOffline: true,\n            auth: {\n                type: AUTH_TYPE.API_KEY,\n                apiKey: awsconfig.aws_appsync_apiKey,\n            },\n        });\n        let apiData = '';\n        try {\n            apiData = await client.query({\n                query: gql(queries.getCloseResponses),\n                variables: { formID: this.state.id, round: this.state.currentRound }\n            });\n            console.log(\"api data fetched\");\n            this.state.call = true;\n            console.log(apiData);\n        } catch (e) {\n            console.log(e);\n        }\n        if (apiData == '' || apiData.data.getCloseResponses == null) {\n        } else {\n            let data = apiData.data.getCloseResponses.words;\n            // var editData = data.replace(/=/g, \":\");\n            // data = editData.replace(/-/g, '\"');\n            this.setState({\n                words: data,\n            });\n            (() => { this.setCheckboxes() })();\n        }\n\n    }\n\n    handleCheck(e) {\n        var key = e.target.name;\n        const index = (this.state.returnWords).indexOf(key);\n        if (e.target.checked == true) {\n            if (index < 0) {\n                (this.state.returnWords).push(key);\n            }\n        } else {\n            if (index >= 0) {\n                (this.state.returnWords).splice(index, 1);\n            }\n        }\n        console.log(this.state.returnWords);\n\n    }\n\n    async handleStep1Submit(e) {\n        e.preventDefault();\n        this.setState({ loading: true });\n        var myHeaders = new Headers();\n        myHeaders.append(\"Content-Type\", \"application/json\");\n        var raw = JSON.stringify({\n            \"formID\": this.state.id.toString(),\n            \"round\": this.state.currentRound,\n            \"words\": ('\"[' + this.state.returnWords + ']\"'),\n            \"replaceWord\": this.state.input\n        });\n        var requestOptions = {\n            method: 'PATCH',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n        await fetch(\"https://5q71mrnwdc.execute-api.us-west-2.amazonaws.com/dev\", requestOptions).catch(error => console.log('error', error));\n        var myHeaders2 = new Headers();\n        myHeaders2.append(\"Content-Type\", \"application/json\");\n        var raw2 = JSON.stringify({ \"formID\": this.state.id.toString()});\n        var requestOptions2 = {\n            method: 'PUT', \n            headers: myHeaders2,\n            body: raw2,\n            redirect: 'follow'\n        };\n        await fetch(\"https://5q71mrnwdc.execute-api.us-west-2.amazonaws.com/dev\", requestOptions2).catch(error => console.log('error', error));\n        this.setState({ loading: false });\n        this.setState({ call: false });\n    }\n\n    handleInput(e) {\n        let value = e.target.value;\n        this.setState({ input: value });\n    }\n\n    switchRound(e) {\n        this.setState({\n            currentRound: e.target.value,\n            call: false\n        })\n    }\n\n    generateRoundButtons() {\n        var arr = [];\n        for (var i = 1; i <= 10; i++) {\n            arr.push(<Button\n                action={(e) => this.switchRound(e)}\n                disabled = {this.state.loading}\n                value={('r' + i)}\n                type={'primary'}\n                title={'Round ' + i}\n            />)\n        }\n        return arr;\n    }\n    redirectToResponses(e){\n        e.preventDefault();\n        this.setState({redirectToResponse: true});\n    }\n\n    setCheckboxes() {\n        let arr = [];\n        let header = Object.keys((this.state.words));\n        header.map((key, index) => {\n            arr.push(<div><input type='checkbox' id={this.state.words[key]} name={this.state.words[key]} onClick={(e) => this.handleCheck(e)} />\n                <label for={this.state.words[key]}> {this.state.words[key]} </label></div>);\n        })\n        this.setState({ checks: arr });\n    }\n    render() {\n        if (!this.state.call) {\n            (async () => { this.getObjects(); })();\n        }\n        if(this.state.redirectToResponse){\n            this.state.call = false;\n            this.state.redirectToResponse = false;\n            return <Redirect to={{\n                pathname: \"/responseManager\",\n                state: {\n                    formID: this.state.id,\n                    userID: this.props.location.state.userID,\n                    status: this.props.location.state.status,\n                }\n            }} />\n        }\n\n        return (\n            <div>\n                {this.generateRoundButtons()}\n                {this.state.currentRound}\n                {this.state.checks}\n                <Input inputType={'text'}\n                    name={'input'}\n                    value={this.state.input}\n                    placeholder={'Word to Replace'}\n                    handleChange={this.handleInput}\n\n                /> \n                <Button\n                    action={(e) => this.handleStep1Submit(e)}\n                    type={'primary'}\n                    title={'Submit'}\n                /> { /*Submit */}\n                <Button\n                    action={this.redirectToResponses}\n                    disabled = {this.state.loading}\n                    type={'primary'}\n                    title={'Go back to Responses'}\n                />\n\n                {this.state.loading && <Loader type=\"ThreeDots\" color=\"#2BAD60\" height=\"50\" width=\"50\" />}\n            </div>\n        )\n    }\n}\n\nexport default MatchingPage;","/Users/animeshagrawal/Documents/Sheep/src/pages/responseManager.jsx",["190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205"],"/Users/animeshagrawal/Documents/Sheep/src/graphql/queries.js",[],"/Users/animeshagrawal/Documents/Sheep/src/graphql/mutations.js",[],"/Users/animeshagrawal/Documents/Sheep/src/components/Input.jsx",[],"/Users/animeshagrawal/Documents/Sheep/src/components/Textarea.jsx",[],"/Users/animeshagrawal/Documents/Sheep/src/components/Button.jsx",["206"],"import React from 'react';\nimport \"./button.css\"\n\nconst Button = (props) => {\n\tconsole.log(props.style);\n\treturn (\n\t\t<button\n\t\t\tname={props.label}\n\t\t\tvalue= {props.value}\n\t\t\tdisabled = {props.disabled}\n\t\t\tstyle={props.style}\n\t\t\tclassName={props.type == 'primary' ? 'btn btn-primary' : 'btn btn-secondary'}\n\t\t\tonClick={props.action} >\n\t\t\t{props.title}\n\t\t</button>)\n}\n\n\nexport default Button;","/Users/animeshagrawal/Documents/Sheep/src/containers/LandingFormContainer.jsx",["207","208","209","210","211","212","213","214","215"],"import React, { Component } from 'react';\nimport '../App.css';\nimport { Helmet } from \"react-helmet\";\n// import background from '../images/sheepbackimage.jpg'\n\n/* Import Components */\nimport Input from '../components/Input';\nimport Button from '../components/Button';\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom';\n\nimport AWSAppSyncClient, { AUTH_TYPE } from 'aws-appsync';\nimport awsconfig from '../aws-exports';\nimport gql from 'graphql-tag';\n\nimport * as queries from '../graphql/queries';\n\nclass LandingFormContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      code: '',\n      redirectSubmit: false,\n      redirectAdmin: false,\n      redirectResults: false,\n      errorMessage: '',\n      show: false,\n      hidden1: false,\n      hidden2: false,\n    }\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.handleAdminButton = this.handleAdminButton.bind(this);\n    this.showNotification = this.showNotification.bind(this);\n  }\n\n  /* This lifecycle hook gets executed when the component mounts */\n\n  handleInput(e) {\n    let value = e.target.value;\n    let valueWidth = value.length;\n    this.setState({ code: value });\n  }\n\n  showNotification() {\n    // You can use redux for this.\n    this.setState({\n      show: true,\n    });\n    setTimeout(() => {\n      this.setState({\n        show: false,\n      });\n    }, 2000);\n  }\n\n  async handleFormSubmit(e) {\n    e.preventDefault();\n    const client = new AWSAppSyncClient({\n      url: awsconfig.aws_appsync_graphqlEndpoint,\n      region: awsconfig.aws_appsync_region,\n      disableOffline: true,\n      auth: {\n        type: AUTH_TYPE.API_KEY,\n        apiKey: awsconfig.aws_appsync_apiKey,\n      },\n    });\n    try {\n      const apiData = await client.query({ query: gql(queries.getForm), variables: { id: this.state.code } });\n      const open = apiData.data.getForm.active;\n      if (apiData.data.getForm == null) {\n        (() => { this.showNotification() })();\n      } else if (open) {\n        this.setState({ redirectSubmit: true });\n      } else {\n        this.setState({ redirectResults: true });\n      }\n    } catch (e) {\n      console.log(e);\n      (() => { this.showNotification() })();\n    }\n  }\n  handleAdminButton(e) {\n    e.preventDefault();\n    this.setState({ redirectAdmin: true });\n  }\n\n  render() {\n    try {\n      if (this.props.location.state.show) {\n        (() => { this.showNotification() })();\n      }\n    } catch{\n      console.log('no show');\n    }\n    if (this.state.redirectSubmit) {\n      console.log(\"call mainpage\");\n      console.log(this.state.code)\n      this.state.redirectSubmit = false;\n      return <Redirect to={{\n        pathname: \"/userForm\",\n        state: { code: this.state.code, error: false }\n      }} />\n    }\n\n    // if (this.state.redirectAdmin) {\n    //   console.log(\"call admin\");\n    //   this.state.redirectAdmin = false;\n    //   return <Redirect to={{ pathname: \"/adminConsole\" }} />\n    // }\n\n    if (this.state.redirectResults) {\n      console.log(\"call results\");\n      this.state.redirectResults = false;\n      return <Redirect to={{\n        pathname: \"/resultsPage\",\n        state: { code: this.state.code }\n      }} />\n    }\n    return (\n      <div className=\"container\">\n        <Helmet>\n          <link rel=\"stylesheet\" href=\"landing.css\" />\n          {/* <style>{'body { background-image: url(${background}); }'}</style> */}\n        </Helmet>\n        <div className=\"adminButton\">\n          <Button\n            action={this.handleAdminButton}\n            type={'primary'}\n            title={'Go To Admin'}\n          /> { /* Admin */}\n        </div>\n        <div className = \"adminPassword\">\n          {this.state.redirectAdmin && <Password />}\n        </div>\n        <p className = \"disclaimer\"> Note: Please don't use the browser controls (refresh/back)! We're working on a bug :) </p>\n        {/* <button className=\"hidden1\" onClick={() => this.setState({hidden1: true})}></button>\n        <button className=\"hidden2\" disabled= {!this.state.hidden1} onClick={() => this.setState({hidden2: true})}></button> */}\n        <div className=\"landingCont\">\n          <div className=\"child\">\n            <form className=\"container-fluid\" onSubmit={this.handleFormSubmit}>\n\n              <p className=\"codeParagraph\"> Game Code: </p>\n              <Input inputType={'text'}\n                name={'code'}\n                value={this.state.code}\n                placeholder={'Enter your code'}\n                handleChange={this.handleInput}\n\n              /> {/* Code */}\n              <div className=\"subButton\">\n                <Button\n                  action={this.handleFormSubmit}\n                  type={'primary'}\n                  title={'Submit'}\n                /> { /*Submit */}\n\n              </div>\n            </form>\n          </div>\n          <div className='notif'>\n            <Notification show={this.state.show} />\n          </div>\n          <div className=\"credit\">Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n\n        </div>\n      </div>\n\n\n    );\n  }\n}\n\nclass Notification extends React.Component {\n  render() {\n    return <span className={this.props.show ? 'show' : ''}> Uh-oh, make sure you have inputted a valid code! </span>\n  }\n}\n\nclass Password extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      password: '',\n      redirect: false\n    }\n    this.inputHandler = this.inputHandler.bind(this);\n  }\n\n\n  inputHandler(e) {\n    let value = e.target.value;\n    this.setState({ password: value });\n    if (this.state.password == 'bamboozle') {\n      this.setState({ redirect: true });\n    }\n  }\n  render() {\n    if (this.state.redirect) {\n      console.log(\"call admin\");\n      this.state.redirectAdmin = false;\n      return <Redirect to={{ pathname: \"/adminConsole\" }} />\n    }\n    return (<Input inputType={'text'}\n      name={'password'}\n      value={this.state.password}\n      placeholder={'Enter the password'}\n      handleChange={this.inputHandler}\n    />\n    )\n  }\n}\n\nexport default LandingFormContainer;","/Users/animeshagrawal/Documents/Sheep/src/aws-exports.js",[],{"ruleId":"216","replacedBy":"217"},{"ruleId":"218","replacedBy":"219"},{"ruleId":"220","severity":1,"message":"221","line":4,"column":26,"nodeType":"222","messageId":"223","endLine":4,"endColumn":32},{"ruleId":"220","severity":1,"message":"224","line":4,"column":34,"nodeType":"222","messageId":"223","endLine":4,"endColumn":39},{"ruleId":"220","severity":1,"message":"225","line":4,"column":41,"nodeType":"222","messageId":"223","endLine":4,"endColumn":47},{"ruleId":"220","severity":1,"message":"226","line":4,"column":49,"nodeType":"222","messageId":"223","endLine":4,"endColumn":53},{"ruleId":"227","severity":1,"message":"228","line":24,"column":13,"nodeType":"229","endLine":24,"endColumn":23},{"ruleId":"220","severity":1,"message":"230","line":3,"column":8,"nodeType":"222","messageId":"223","endLine":3,"endColumn":15},{"ruleId":"220","severity":1,"message":"231","line":6,"column":10,"nodeType":"222","messageId":"223","endLine":6,"endColumn":13},{"ruleId":"220","severity":1,"message":"232","line":10,"column":8,"nodeType":"222","messageId":"223","endLine":10,"endColumn":18},{"ruleId":"220","severity":1,"message":"221","line":16,"column":27,"nodeType":"222","messageId":"223","endLine":16,"endColumn":33},{"ruleId":"220","severity":1,"message":"224","line":16,"column":35,"nodeType":"222","messageId":"223","endLine":16,"endColumn":40},{"ruleId":"220","severity":1,"message":"225","line":16,"column":42,"nodeType":"222","messageId":"223","endLine":16,"endColumn":48},{"ruleId":"220","severity":1,"message":"226","line":16,"column":50,"nodeType":"222","messageId":"223","endLine":16,"endColumn":54},{"ruleId":"227","severity":1,"message":"228","line":56,"column":9,"nodeType":"229","endLine":56,"endColumn":19},{"ruleId":"227","severity":1,"message":"228","line":57,"column":9,"nodeType":"229","endLine":57,"endColumn":19},{"ruleId":"233","severity":1,"message":"234","line":57,"column":47,"nodeType":"235","messageId":"236","endLine":57,"endColumn":49},{"ruleId":"227","severity":1,"message":"228","line":67,"column":9,"nodeType":"229","endLine":67,"endColumn":19},{"ruleId":"233","severity":1,"message":"234","line":90,"column":21,"nodeType":"235","messageId":"236","endLine":90,"endColumn":23},{"ruleId":"220","severity":1,"message":"237","line":92,"column":23,"nodeType":"222","messageId":"223","endLine":92,"endColumn":30},{"ruleId":"227","severity":1,"message":"228","line":110,"column":13,"nodeType":"229","endLine":110,"endColumn":23},{"ruleId":"227","severity":1,"message":"228","line":111,"column":13,"nodeType":"229","endLine":111,"endColumn":23},{"ruleId":"227","severity":1,"message":"228","line":112,"column":13,"nodeType":"229","endLine":112,"endColumn":23},{"ruleId":"227","severity":1,"message":"228","line":153,"column":13,"nodeType":"229","endLine":153,"endColumn":23},{"ruleId":"227","severity":1,"message":"228","line":154,"column":13,"nodeType":"229","endLine":154,"endColumn":23},{"ruleId":"227","severity":1,"message":"228","line":155,"column":13,"nodeType":"229","endLine":155,"endColumn":23},{"ruleId":"227","severity":1,"message":"228","line":163,"column":13,"nodeType":"229","endLine":163,"endColumn":23},{"ruleId":"227","severity":1,"message":"228","line":169,"column":13,"nodeType":"229","endLine":169,"endColumn":23},{"ruleId":"227","severity":1,"message":"228","line":170,"column":13,"nodeType":"229","endLine":170,"endColumn":23},{"ruleId":"227","severity":1,"message":"228","line":171,"column":13,"nodeType":"229","endLine":171,"endColumn":23},{"ruleId":"220","severity":1,"message":"221","line":9,"column":27,"nodeType":"222","messageId":"223","endLine":9,"endColumn":33},{"ruleId":"220","severity":1,"message":"224","line":9,"column":35,"nodeType":"222","messageId":"223","endLine":9,"endColumn":40},{"ruleId":"220","severity":1,"message":"225","line":9,"column":42,"nodeType":"222","messageId":"223","endLine":9,"endColumn":48},{"ruleId":"220","severity":1,"message":"226","line":9,"column":50,"nodeType":"222","messageId":"223","endLine":9,"endColumn":54},{"ruleId":"233","severity":1,"message":"234","line":126,"column":23,"nodeType":"235","messageId":"236","endLine":126,"endColumn":25},{"ruleId":"238","severity":1,"message":"239","line":127,"column":26,"nodeType":"240","messageId":"241","endLine":127,"endColumn":27,"suggestions":"242"},{"ruleId":"238","severity":1,"message":"239","line":127,"column":51,"nodeType":"240","messageId":"241","endLine":127,"endColumn":52,"suggestions":"243"},{"ruleId":"233","severity":1,"message":"234","line":152,"column":26,"nodeType":"235","messageId":"236","endLine":152,"endColumn":28},{"ruleId":"233","severity":1,"message":"234","line":157,"column":17,"nodeType":"235","messageId":"236","endLine":157,"endColumn":19},{"ruleId":"220","severity":1,"message":"244","line":189,"column":15,"nodeType":"222","messageId":"223","endLine":189,"endColumn":26},{"ruleId":"227","severity":1,"message":"228","line":226,"column":7,"nodeType":"229","endLine":226,"endColumn":17},{"ruleId":"227","severity":1,"message":"228","line":234,"column":7,"nodeType":"229","endLine":234,"endColumn":17},{"ruleId":"227","severity":1,"message":"228","line":239,"column":7,"nodeType":"229","endLine":239,"endColumn":17},{"ruleId":"220","severity":1,"message":"221","line":9,"column":27,"nodeType":"222","messageId":"223","endLine":9,"endColumn":33},{"ruleId":"220","severity":1,"message":"224","line":9,"column":35,"nodeType":"222","messageId":"223","endLine":9,"endColumn":40},{"ruleId":"220","severity":1,"message":"225","line":9,"column":42,"nodeType":"222","messageId":"223","endLine":9,"endColumn":48},{"ruleId":"220","severity":1,"message":"226","line":9,"column":50,"nodeType":"222","messageId":"223","endLine":9,"endColumn":54},{"ruleId":"220","severity":1,"message":"245","line":11,"column":8,"nodeType":"222","messageId":"223","endLine":11,"endColumn":13},{"ruleId":"233","severity":1,"message":"234","line":110,"column":31,"nodeType":"235","messageId":"236","endLine":110,"endColumn":33},{"ruleId":"233","severity":1,"message":"234","line":115,"column":21,"nodeType":"235","messageId":"236","endLine":115,"endColumn":23},{"ruleId":"220","severity":1,"message":"246","line":143,"column":19,"nodeType":"222","messageId":"223","endLine":143,"endColumn":26},{"ruleId":"227","severity":1,"message":"228","line":154,"column":13,"nodeType":"229","endLine":154,"endColumn":23},{"ruleId":"220","severity":1,"message":"247","line":2,"column":8,"nodeType":"222","messageId":"223","endLine":2,"endColumn":16},{"ruleId":"220","severity":1,"message":"221","line":6,"column":26,"nodeType":"222","messageId":"223","endLine":6,"endColumn":32},{"ruleId":"220","severity":1,"message":"224","line":6,"column":34,"nodeType":"222","messageId":"223","endLine":6,"endColumn":39},{"ruleId":"220","severity":1,"message":"225","line":6,"column":41,"nodeType":"222","messageId":"223","endLine":6,"endColumn":47},{"ruleId":"220","severity":1,"message":"226","line":6,"column":49,"nodeType":"222","messageId":"223","endLine":6,"endColumn":53},{"ruleId":"227","severity":1,"message":"228","line":26,"column":7,"nodeType":"229","endLine":26,"endColumn":17},{"ruleId":"220","severity":1,"message":"221","line":10,"column":27,"nodeType":"222","messageId":"223","endLine":10,"endColumn":33},{"ruleId":"220","severity":1,"message":"224","line":10,"column":35,"nodeType":"222","messageId":"223","endLine":10,"endColumn":40},{"ruleId":"220","severity":1,"message":"225","line":10,"column":42,"nodeType":"222","messageId":"223","endLine":10,"endColumn":48},{"ruleId":"220","severity":1,"message":"226","line":10,"column":50,"nodeType":"222","messageId":"223","endLine":10,"endColumn":54},{"ruleId":"233","severity":1,"message":"234","line":87,"column":31,"nodeType":"235","messageId":"236","endLine":87,"endColumn":33},{"ruleId":"233","severity":1,"message":"234","line":92,"column":21,"nodeType":"235","messageId":"236","endLine":92,"endColumn":23},{"ruleId":"220","severity":1,"message":"246","line":122,"column":23,"nodeType":"222","messageId":"223","endLine":122,"endColumn":30},{"ruleId":"227","severity":1,"message":"228","line":152,"column":13,"nodeType":"229","endLine":152,"endColumn":23},{"ruleId":"220","severity":1,"message":"248","line":2,"column":8,"nodeType":"222","messageId":"223","endLine":2,"endColumn":28},{"ruleId":"220","severity":1,"message":"221","line":14,"column":27,"nodeType":"222","messageId":"223","endLine":14,"endColumn":33},{"ruleId":"220","severity":1,"message":"224","line":14,"column":35,"nodeType":"222","messageId":"223","endLine":14,"endColumn":40},{"ruleId":"220","severity":1,"message":"225","line":14,"column":42,"nodeType":"222","messageId":"223","endLine":14,"endColumn":48},{"ruleId":"220","severity":1,"message":"226","line":14,"column":50,"nodeType":"222","messageId":"223","endLine":14,"endColumn":54},{"ruleId":"220","severity":1,"message":"249","line":14,"column":56,"nodeType":"222","messageId":"223","endLine":14,"endColumn":64},{"ruleId":"233","severity":1,"message":"234","line":70,"column":21,"nodeType":"235","messageId":"236","endLine":70,"endColumn":23},{"ruleId":"220","severity":1,"message":"237","line":72,"column":23,"nodeType":"222","messageId":"223","endLine":72,"endColumn":30},{"ruleId":"220","severity":1,"message":"250","line":126,"column":13,"nodeType":"222","messageId":"223","endLine":126,"endColumn":20},{"ruleId":"233","severity":1,"message":"234","line":127,"column":30,"nodeType":"235","messageId":"236","endLine":127,"endColumn":32},{"ruleId":"233","severity":1,"message":"234","line":149,"column":25,"nodeType":"235","messageId":"236","endLine":149,"endColumn":27},{"ruleId":"233","severity":1,"message":"234","line":154,"column":48,"nodeType":"235","messageId":"236","endLine":154,"endColumn":50},{"ruleId":"220","severity":1,"message":"251","line":171,"column":15,"nodeType":"222","messageId":"223","endLine":171,"endColumn":20},{"ruleId":"220","severity":1,"message":"252","line":172,"column":15,"nodeType":"222","messageId":"223","endLine":172,"endColumn":20},{"ruleId":"220","severity":1,"message":"253","line":173,"column":15,"nodeType":"222","messageId":"223","endLine":173,"endColumn":24},{"ruleId":"220","severity":1,"message":"254","line":226,"column":15,"nodeType":"222","messageId":"223","endLine":226,"endColumn":23},{"ruleId":"220","severity":1,"message":"255","line":1,"column":17,"nodeType":"222","messageId":"223","endLine":1,"endColumn":26},{"ruleId":"220","severity":1,"message":"221","line":4,"column":27,"nodeType":"222","messageId":"223","endLine":4,"endColumn":33},{"ruleId":"220","severity":1,"message":"224","line":4,"column":35,"nodeType":"222","messageId":"223","endLine":4,"endColumn":40},{"ruleId":"220","severity":1,"message":"225","line":4,"column":42,"nodeType":"222","messageId":"223","endLine":4,"endColumn":48},{"ruleId":"220","severity":1,"message":"226","line":4,"column":50,"nodeType":"222","messageId":"223","endLine":4,"endColumn":54},{"ruleId":"220","severity":1,"message":"256","line":12,"column":13,"nodeType":"222","messageId":"223","endLine":12,"endColumn":22},{"ruleId":"233","severity":1,"message":"234","line":57,"column":21,"nodeType":"235","messageId":"236","endLine":57,"endColumn":23},{"ruleId":"233","severity":1,"message":"234","line":73,"column":30,"nodeType":"235","messageId":"236","endLine":73,"endColumn":32},{"ruleId":"257","severity":1,"message":"258","line":151,"column":33,"nodeType":"259","messageId":"260","endLine":151,"endColumn":35},{"ruleId":"227","severity":1,"message":"228","line":162,"column":13,"nodeType":"229","endLine":162,"endColumn":23},{"ruleId":"227","severity":1,"message":"228","line":163,"column":13,"nodeType":"229","endLine":163,"endColumn":23},{"ruleId":"220","severity":1,"message":"221","line":12,"column":27,"nodeType":"222","messageId":"223","endLine":12,"endColumn":33},{"ruleId":"220","severity":1,"message":"224","line":12,"column":35,"nodeType":"222","messageId":"223","endLine":12,"endColumn":40},{"ruleId":"220","severity":1,"message":"225","line":12,"column":42,"nodeType":"222","messageId":"223","endLine":12,"endColumn":48},{"ruleId":"220","severity":1,"message":"226","line":12,"column":50,"nodeType":"222","messageId":"223","endLine":12,"endColumn":54},{"ruleId":"220","severity":1,"message":"237","line":70,"column":13,"nodeType":"222","messageId":"223","endLine":70,"endColumn":20},{"ruleId":"220","severity":1,"message":"237","line":93,"column":13,"nodeType":"222","messageId":"223","endLine":93,"endColumn":20},{"ruleId":"220","severity":1,"message":"237","line":116,"column":13,"nodeType":"222","messageId":"223","endLine":116,"endColumn":20},{"ruleId":"227","severity":1,"message":"228","line":144,"column":13,"nodeType":"229","endLine":144,"endColumn":23},{"ruleId":"227","severity":1,"message":"228","line":155,"column":13,"nodeType":"229","endLine":155,"endColumn":23},{"ruleId":"227","severity":1,"message":"228","line":165,"column":13,"nodeType":"229","endLine":165,"endColumn":23},{"ruleId":"233","severity":1,"message":"234","line":269,"column":21,"nodeType":"235","messageId":"236","endLine":269,"endColumn":23},{"ruleId":"220","severity":1,"message":"237","line":271,"column":23,"nodeType":"222","messageId":"223","endLine":271,"endColumn":30},{"ruleId":"233","severity":1,"message":"234","line":279,"column":72,"nodeType":"235","messageId":"236","endLine":279,"endColumn":74},{"ruleId":"233","severity":1,"message":"234","line":450,"column":21,"nodeType":"235","messageId":"236","endLine":450,"endColumn":23},{"ruleId":"233","severity":1,"message":"234","line":455,"column":67,"nodeType":"235","messageId":"236","endLine":455,"endColumn":69},{"ruleId":"227","severity":1,"message":"228","line":545,"column":9,"nodeType":"229","endLine":545,"endColumn":19},{"ruleId":"233","severity":1,"message":"234","line":12,"column":26,"nodeType":"235","messageId":"236","endLine":12,"endColumn":28},{"ruleId":"220","severity":1,"message":"221","line":9,"column":27,"nodeType":"222","messageId":"223","endLine":9,"endColumn":33},{"ruleId":"220","severity":1,"message":"224","line":9,"column":35,"nodeType":"222","messageId":"223","endLine":9,"endColumn":40},{"ruleId":"220","severity":1,"message":"225","line":9,"column":42,"nodeType":"222","messageId":"223","endLine":9,"endColumn":48},{"ruleId":"220","severity":1,"message":"226","line":9,"column":50,"nodeType":"222","messageId":"223","endLine":9,"endColumn":54},{"ruleId":"220","severity":1,"message":"261","line":41,"column":9,"nodeType":"222","messageId":"223","endLine":41,"endColumn":19},{"ruleId":"227","severity":1,"message":"228","line":99,"column":7,"nodeType":"229","endLine":99,"endColumn":17},{"ruleId":"227","severity":1,"message":"228","line":114,"column":7,"nodeType":"229","endLine":114,"endColumn":17},{"ruleId":"233","severity":1,"message":"234","line":194,"column":29,"nodeType":"235","messageId":"236","endLine":194,"endColumn":31},{"ruleId":"227","severity":1,"message":"228","line":201,"column":7,"nodeType":"229","endLine":201,"endColumn":17},"no-native-reassign",["262"],"no-negated-in-lhs",["263"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Switch' is defined but never used.","'Link' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'Amplify' is defined but never used.","'API' is defined but never used.","'CreatePage' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'mutData' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["264","265"],["266","267"],"'newResponse' is assigned a value but never used.","'Input' is defined but never used.","'newGame' is assigned a value but never used.","'LandPage' is defined but never used.","'LandingFormContainer' is defined but never used.","'Redirect' is defined but never used.","'nullVal' is assigned a value but never used.","'fname' is assigned a value but never used.","'lname' is assigned a value but never used.","'totPoints' is assigned a value but never used.","'formData' is assigned a value but never used.","'Component' is defined but never used.","'mutations' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'valueWidth' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"268","fix":"269","desc":"270"},{"messageId":"271","fix":"272","desc":"273"},{"messageId":"268","fix":"274","desc":"270"},{"messageId":"271","fix":"275","desc":"273"},"removeEscape",{"range":"276","text":"277"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"278","text":"279"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"280","text":"277"},{"range":"281","text":"279"},[3422,3423],"",[3422,3422],"\\",[3447,3448],[3447,3447]]